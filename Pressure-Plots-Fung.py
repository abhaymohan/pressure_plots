import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm

# ------------------------------------------------------------
# pressure data (arterial + venous)
# ------------------------------------------------------------
d_art_CM_p = np.array([
    8.088888889,  8.977777778,  9.777777778, 10.75555556, 11.73333333,
   12.84444444, 13.68888889, 14.75555556, 15.82222222, 16.8,
   17.77777778, 18.75555556, 19.82222222, 20.88888889, 21.77777778,
   22.62222222, 23.82222222, 24.8,        25.86666667, 26.84444444,
   27.82222222, 28.97777778, 29.77777778, 31.91111111, 32.88888889,
   34.84444444, 35.91111111, 37.77777778, 38.71111111, 39.73333333,
   41.68888889, 42.84444444, 49.77777778, 50.84444444, 53.86666667,
   54.75555556, 55.82222222, 59.28888889
])
p_art_CM_p = np.array([
    30.95499451, 42.20636663, 36.33369923, 43.4687157,  42.26125137,
    36.44346872, 38.52908891, 40.39517014, 46.32272228, 44.67618002,
    48.40834248, 51.59165752, 46.32272228, 45.33479693, 62.56860593,
    48.73765093, 55.65312843, 52.36004391, 46.43249177, 50.38419319,
    58.83644347, 63.4467618,  70.58177827, 74.31394072, 60.37321625,
    60.26344676, 69.37431394, 67.28869374, 80.46103183, 98.02414929,
    75.52140505, 71.45993414, 80.24149286, 84.41273326, 73.21624588,
   107.4643249,  75.41163557, 86.27881449
])

d_ven_CM_p = np.array([
    8.0,         9.244444444, 10.31111111, 11.02222222, 12.17777778,
   13.24444444, 14.13333333, 15.02222222, 16.08888889, 17.24444444,
   18.04444444, 19.11111111, 20.08888889, 21.11111111, 22.13333333,
   23.02222222, 24.0,        25.06666667, 26.13333333, 27.02222222,
   27.91111111, 29.06666667, 30.04444444, 30.93333333, 32.08888889,
   33.06666667, 33.86666667, 35.91111111, 36.88888889, 38.13333333,
   38.84444444, 39.91111111, 41.06666667, 41.95555556, 42.93333333,
   45.95555556, 50.04444444, 52.0,        52.88888889, 53.15555556,
   53.68888889, 54.93333333, 55.82222222, 57.06666667
])
p_ven_CM_p = np.array([
    30.84522503, 26.12513721, 29.03402854, 34.467618,   27.44237102,
    35.34577387, 34.24807903, 37.43139407, 31.28430296, 28.43029638,
    31.28430296, 27.77167947, 29.52799122, 32.3819978,  28.86937431,
    29.19868277, 28.21075741, 31.28430296, 25.68605928, 31.17453348,
    22.50274424, 27.99121844, 25.02744237, 30.29637761, 22.94182217,
    19.86827662, 23.92974753, 19.9780461,  22.0636663,  20.03293085,
    36.66300768, 24.1492865,  35.34577387, 20.52689352, 17.45334797,
    16.24588364, 25.02744237, 12.51372119, 22.72228321, 35.67508233,
    27.99121844, 31.39407245, 16.46542261, 25.35675082
])

# ------------------------------------------------------------
# BC‐Upper pressure data
# ------------------------------------------------------------
d_art_BCU = np.array([
     12.0, 18.0,  9.0,  10.0, 14.230047, 14.0, 19.57097168,
     10.2623794, 9.99573432, 15.63928652, 18.06188176, 8.53642765,
     15.74837301, 8.295533843, 7.45715371, 9.0
])
p_art_BCU = np.array([
     41.92, 48.62, 39.21, 40.06, 44.2, 44.1, 50.5,
     40.4, 40.2, 45.9, 48.7, 39.2,
     45.9, 38.4, 38.2, 39.2
])
d_ven_BCU = np.array([
    23.0, 9.0, 10.0, 23.0, 18.0, 10.0, 18.0, 13.0,
    20.0, 23.43, 16.0, 14.50287384, 17.57133144, 12.92180864,
    19.72464364, 17.0, 10.21958237, 9.0, 15.0345894,
    13.1, 10.29863587, 11.58032918, 8.0, 8.5, 33.0
])
p_ven_BCU = np.array([
    31.14, 37.6, 36.89, 31.14, 32.56, 36.89, 32.59, 34.92,
    31.92, 30.98, 33.4, 34.2, 32.8, 35.0,
    31.8, 33.0, 36.6, 37.6, 33.8,
    35.0, 36.8, 36.2, 38.2, 38.0, 29.0
])

# ------------------------------------------------------------
# BC‐Lower pressure data
# ------------------------------------------------------------
d_art_BCL = np.array([
     12.0, 18.0, 9.0, 10.0, 14.230047, 14.0, 19.57097168,
     10.2623794, 9.99573432, 15.63928652, 18.06188176, 8.53642765,
     15.74837301, 8.295533843, 7.45715371, 9.0
])
p_art_BCL = np.array([
     36.24, 43.0, 33.48, 34.34, 38.76, 38.4, 44.9,
     34.8, 34.4, 40.4, 43.1, 33.2,
     40.2, 32.8, 32.6, 33.4
])
d_ven_BCL = np.array([
    23.0, 9.0, 10.0, 23.0, 18.0, 10.0, 18.0, 13.0,
    20.0, 23.43, 16.0, 14.50287384, 17.57133144, 12.92180864,
    19.72464364, 17.0, 10.21958237, 9.0, 15.0345894,
    13.1, 10.29863587, 11.58032918, 8.0, 8.5, 33.0
])
p_ven_BCL = np.array([
    25.29, 31.9, 31.25, 25.29, 27.11, 31.25, 27.05, 29.3,
    26.3, 25.23, 27.87, 28.6, 27.2, 29.4,
    26.4, 27.2, 31.0, 32.0, 28.2,
    29.8, 30.8, 30.6, 32.6, 32.2, 22.2
])

# ------------------------------------------------------------
# Simulation data - H‐1
# ------------------------------------------------------------
# H-1
d_art_H1 = np.array([12, 18, 9, 10])
p_art_H1 = np.array([38.7999008, 43.75031, 40.375031, 40.375031])
d_ven_H1 = np.array([23, 9, 10, 23, 18, 10])
p_ven_H1 = np.array([33.124597, 37.749814, 37.749814, 31.999504, 31.999504, 31.749318])

pivot = 8.0

x_art_CM = -np.abs(d_art_CM_p - pivot)
x_ven_CM = +np.abs(d_ven_CM_p - pivot)

x_art_BCU = -np.abs(d_art_BCU - pivot)
x_ven_BCU = +np.abs(d_ven_BCU - pivot)

x_art_BCL = -np.abs(d_art_BCL - pivot)
x_ven_BCL = +np.abs(d_ven_BCL - pivot)

x_H1 = np.concatenate((-np.abs(d_art_H1 - pivot), +np.abs(d_ven_H1 - pivot)))
p_H1 = np.concatenate((p_art_H1, p_ven_H1))

# ------------------------------------------------------------
# Fit 6th‐degree polynomial
# ------------------------------------------------------------
x_all_CM = np.concatenate((x_art_CM, x_ven_CM))
p_all_CM = np.concatenate((p_art_CM_p, p_ven_CM_p))

X = np.column_stack([x_all_CM**i for i in range(7)])
model = sm.OLS(p_all_CM, X).fit()

x_fit = np.linspace(x_all_CM.min(), x_all_CM.max(), 500)
X_fit = np.column_stack([x_fit**i for i in range(7)])
pred = model.get_prediction(X_fit)
p_mean = pred.predicted_mean
ci95 = pred.conf_int(alpha=0.05)
p_lo95, p_hi95 = ci95[:,0], ci95[:,1]

# ------------------------------------------------------------
# Plotting
# ------------------------------------------------------------
fig, ax = plt.subplots(figsize=(9, 6))

# Simulation sets
ax.scatter(x_H1, p_H1, c='C2', marker='^', s=60, edgecolor='k', label='H-1')

# Regression & 95% CI
ax.plot(x_fit, p_mean, 'k-', lw=2, label='In vivo')
ax.plot(x_fit, p_lo95, '-.', c='C7', label='95% CI lower')
ax.plot(x_fit, p_hi95, '-.', c='C7', label='95% CI upper')

# Non‐monotonic x‐axis
left_D  = np.array([56,48,40,32,24,16,8], dtype=float)
right_D = np.array([16,24,32,40,48,56], dtype=float)
ticks = np.concatenate((-np.abs(left_D-pivot), [0], +np.abs(right_D-pivot)))
labels = [str(int(d)) for d in np.concatenate((left_D,[8],right_D))]
ax.set_xticks(ticks)
ax.set_xticklabels(labels)
ax.set_xlabel('D (μm) ← Arterial   |   Venous →', fontsize=11)
ax.set_ylabel('Pressure (mmHg)',               fontsize=11)
ax.axvline(0, color='0.5', linestyle='--', linewidth=1)

# Grid & limits
#ax.minorticks_on()
#ax.grid(which='major', linestyle=':', alpha=0.5)
#ax.grid(which='minor', linestyle=':', alpha=0.3)
ax.set_xlim(-(24-pivot), +(24-pivot))

# Legend
ax.legend(loc='upper right', frameon=False, ncol=1, fontsize='medium')

plt.tight_layout()
plt.show()


